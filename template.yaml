---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Saturn Personal Productivity Suite

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - local
      - dev
      - prod
    Description: The environment to deploy the stack to (local, dev, prod)
  Cors:
    Type: String
    Default: "'*'"
    Description: The CORS policy to apply to the API Gateway
  DynamoDBEndpoint:
    Type: String
    Default: ""
    Description: If specfied enables local DynamoDB with the provided endpoint.
  AuthCallbackURL:
    Type: String
    Default: "https://localhost:3000"
    Description: The URL to redirect to after authentication

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Handler: bootstrap
    Runtime: provided.al2023
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

Resources:
  SaturnApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-saturn-api"
      StageName: !Ref Environment
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowOrigin: !Ref Cors
      Auth:
        DefaultAuthorizer: SaturnAuthorizer
        Authorizers:
          SaturnAuthorizer:
            UserPoolArn: !GetAtt SaturnUserPool.Arn

  BudgetGetFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${Environment}-saturn-budget-get"
      CodeUri: ./cmd/functions/budget/get
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /budgets/{id}
            Method: GET
            RestApiId: !Ref SaturnApi
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BudgetTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BudgetTable

  BudgetCreateFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${Environment}-saturn-budget-create"
      CodeUri: ./cmd/functions/budget/create
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /budgets
            Method: POST
            RestApiId: !Ref SaturnApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BudgetTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BudgetTable

  BudgetListFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${Environment}-saturn-budget-list"
      CodeUri: ./cmd/functions/budget/list
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /budgets
            Method: GET
            RestApiId: !Ref SaturnApi
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BudgetTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BudgetTable

  BudgetUpdateFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${Environment}-saturn-budget-update"
      CodeUri: ./cmd/functions/budget/update
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /budgets/{id}
            Method: PUT
            RestApiId: !Ref SaturnApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BudgetTable

  BudgetDeleteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${Environment}-saturn-budget-delete"
      CodeUri: ./cmd/functions/budget/delete
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /budgets/{id}
            Method: DELETE
            RestApiId: !Ref SaturnApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BudgetTable

  BudgetTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-saturn-budgets"
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  SaturnUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Environment}-saturn-user-pool"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: false
        - AttributeDataType: String
          Name: name
          Mutable: true
        - AttributeDataType: String
          Name: family_name
          Mutable: true
        - AttributeDataType: String
          Name: given_name
          Mutable: true
        - AttributeDataType: String
          Name: created_at
          Mutable: false

  SaturnUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${Environment}-saturn-user-pool-client"
      UserPoolId: !Ref SaturnUserPool
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Ref AuthCallbackURL
      LogoutURLs:
        - !Ref AuthCallbackURL
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH

  SaturnUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${Environment}-saturn-user-pool-domain"
      UserPoolId: !Ref SaturnUserPool
