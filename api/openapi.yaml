---
openapi: 3.0.0

info:
  title: Saturn Personal Productivity Suite API
  version: 1.0.0

servers:
  - url: https://localhost:3000
    description: Local server

paths:
  /budgets:
    get:
      summary: List all budgets
      operationId: ListBudgets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Budget"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new budget
      operationId: CreateBudget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Budget"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /budgets/{id}:
    get:
      summary: Get an budget by ID
      operationId: GetBudget
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update an budget by ID
      operationId: UpdateBudget
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Budget"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an budget by ID
      operationId: DeleteBudget
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: No content
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /expenses:
    get:
      summary: List all expenses
      operationId: ListExpenses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Expense"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new expense
      operationId: CreateExpense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Expense"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /expenses/{id}:
    get:
      summary: Get an expense by ID
      operationId: GetExpense
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update an expense by ID
      operationId: UpdateExpense
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Expense"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an expense by ID
      operationId: DeleteExpense
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: No content
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /incomes:
    get:
      summary: List all incomes
      operationId: ListIncomes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Income"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new income
      operationId: CreateIncome
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Income"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Income"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /incomes/{id}:
    get:
      summary: Get an income by ID
      operationId: GetIncome
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Income"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update an income by ID
      operationId: UpdateIncome
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Income"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Income"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an income by ID
      operationId: DeleteIncome
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: No content
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    ID:
      type: string
      format: uuid
      description: The unique identifier for the resource
      example: 123e4567-e89b-12d3-a456-426614174000
      x-go-type: string
    Error:
      type: object
      description: An error response
      properties:
        message:
          type: string
          description: A message describing the error
          example: Unauthorized
    Budget:
      type: object
      description: A budget to track expenses
      required:
        - description
        - amount
      properties:
        id:
          $ref: "#/components/schemas/ID"
          example: 123e4567-e89b-12d3-a456-426614174000
          readOnly: true
        description:
          type: string
          description: A description of the budget
          example: Phone and internet bill
        amount:
          type: integer
          description: The amount of the budget in cents (e.g. $10.00 is 1000)
          example: 1000
    Expense:
      type: object
      description: An expense to track
      required:
        - type
        - budget
        - description
        - billingDay
        - amount
      properties:
        id:
          $ref: "#/components/schemas/ID"
          example: 123e4567-e89b-12d3-a456-426614174000
          readOnly: true
        budget:
          type: object
          description: The budget this expense is associated with
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/ID"
              example: 123e4567-e89b-12d3-a456-426614174000
            description:
              type: string
              description: A description of the budget
              example: Phone and internet bill
              readOnly: true
        type:
          type: string
          description: >
            The type of expense:
              - `fixed`: A recurring expense that is the same amount each month
              - `variable`: An expense that changes each month

            When `type` is `fixed`, the `amount` is the total amount of the expense.
            When `type` is `variable`, the `amount` is an estimate of the expense.
          enum:
            - fixed
            - variable
          example: fixed
        description:
          type: string
          description: A description of the expense
          example: Phone and internet bill
        billingDay:
          type: integer
          description: The day of the month the expense is billed
          example: 15
        amount:
          type: integer
          description: The amount of the expense in cents (e.g. $10.00 is 1000)
          example: 1000
    Income:
      type: object
      description: Recurring income to track
      required:
        - name
        - amount
      properties:
        id:
          $ref: "#/components/schemas/ID"
          example: 123e4567-e89b-12d3-a456-426614174000
          readOnly: true
        name:
          type: string
          description: The name of the income
          example: Paycheck
        amount:
          type: integer
          description: The amount of the income in cents (e.g. $10.00 is 1000)
          example: 1000
  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Bad request
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Unauthorized
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Resource not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Internal server error
  parameters:
    ID:
      name: id
      description: The unique identifier for the resource
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"
